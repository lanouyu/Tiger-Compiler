/* The following code was generated by JFlex 1.4.1 on 16-11-28 下午4:08 */

package tiger.parse;
import tiger.errormsg.ErrorMsg;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 16-11-28 下午4:08 from the specification file
 * <tt>/Users/blue/Documents/F1403001/Compiler/tiger_runnable/tiger/parse/Tiger.flex</tt>
 */
class Yylex implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int STRINGIN = 3;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  5,  0,  0,  0, 25,  0, 20, 21,  7, 26, 18, 17, 19,  6, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 12, 22, 16, 15, 11,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 23, 29, 24,  0,  4, 
     0,  2,  2,  2, 14,  2,  2, 30,  2, 10,  2,  2,  2,  2,  8,  2, 
     2,  2,  2,  2,  9,  2,  2,  2,  2,  2,  2, 27, 13, 28,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\2\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\0\1\51\5\0\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\174\0\370\0\u0117\0\u0136\0\u0155\0\174\0\174\0\u0174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\u0193\0\u01b2\0\174"+
    "\0\174\0\u01d1\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\u01f0"+
    "\0\174\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\3\7\1\14\1\15\1\16\1\7\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\5\1\7\6\35\1\36\1\37"+
    "\27\35\5\40\1\41\27\40\1\42\2\40\1\6\3\40"+
    "\1\43\27\40\1\44\1\40\40\0\1\6\37\0\3\7"+
    "\3\0\3\7\3\0\1\7\17\0\1\7\3\0\1\10"+
    "\42\0\1\45\35\0\1\46\47\0\1\47\36\0\1\50"+
    "\32\0\1\51\3\0\1\52\26\0\1\53\35\0\1\54"+
    "\35\0\1\55\2\0\1\56\1\57\4\0\1\60\16\0"+
    "\1\61\13\0\1\62\62\0\1\63\12\0\1\64\35\0"+
    "\1\65\36\0\1\66\36\0\1\67\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[682];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\4\1\2\11\1\1\15\11"+
    "\2\1\2\11\1\1\15\11\1\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
StringBuffer str = new StringBuffer();
int comNum;
private void newline() {
  errorMsg.newline(yychar);
}

private void err(int pos, String s) {
  errorMsg.error(pos,s);
}

private void err(String s) {
  err(yychar,s);
}

private java_cup.runtime.Symbol tok(int kind, Object value) {
    return new java_cup.runtime.Symbol(kind, yychar, yychar+yylength(), value);
}

private ErrorMsg errorMsg;

Yylex(java.io.InputStream s, ErrorMsg e) {
  this(s);
  errorMsg=e;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { str.setLength(0); yybegin(STRING);
          }
        case 43: break;
        case 16: 
          { return tok(sym.LPAREN, null);
          }
        case 44: break;
        case 14: 
          { return tok(sym.COMMA, null);
          }
        case 45: break;
        case 24: 
          { return tok(sym.RBRACE, null);
          }
        case 46: break;
        case 31: 
          { err("Comment Matching Error!");
          }
        case 47: break;
        case 27: 
          { yybegin(STRINGIN);
          }
        case 48: break;
        case 28: 
          { err("\\ in string matching error!");
          }
        case 49: break;
        case 19: 
          { return tok(sym.LBRACK, null);
          }
        case 50: break;
        case 33: 
          { return tok(sym.ASSIGN, null);
          }
        case 51: break;
        case 32: 
          { return tok(sym.GE, null);
          }
        case 52: break;
        case 35: 
          { return tok(sym.LE, null);
          }
        case 53: break;
        case 17: 
          { return tok(sym.RPAREN, null);
          }
        case 54: break;
        case 40: 
          { str.append('\t');
          }
        case 55: break;
        case 10: 
          { return tok(sym.OR, null);
          }
        case 56: break;
        case 36: 
          { comNum++;
          }
        case 57: break;
        case 3: 
          { return tok(sym.ID, yytext());
          }
        case 58: break;
        case 9: 
          { return tok(sym.COLON, null);
          }
        case 59: break;
        case 18: 
          { return tok(sym.SEMICOLON, null);
          }
        case 60: break;
        case 13: 
          { return tok(sym.MINUS, null);
          }
        case 61: break;
        case 37: 
          { comNum--;
  if (comNum==0) {
    yybegin(YYINITIAL);
  }
          }
        case 62: break;
        case 41: 
          { str.append('\\');
          }
        case 63: break;
        case 6: 
          { return tok(sym.DIVIDE, null);
          }
        case 64: break;
        case 20: 
          { return tok(sym.RBRACK, null);
          }
        case 65: break;
        case 29: 
          { yybegin(STRING);
          }
        case 66: break;
        case 21: 
          { return tok(sym.AND, null);
          }
        case 67: break;
        case 22: 
          { return tok(sym.PLUS, null);
          }
        case 68: break;
        case 8: 
          { return tok(sym.GT, null);
          }
        case 69: break;
        case 23: 
          { return tok(sym.LBRACE, null);
          }
        case 70: break;
        case 12: 
          { return tok(sym.LT, null);
          }
        case 71: break;
        case 7: 
          { return tok(sym.TIMES, null);
          }
        case 72: break;
        case 38: 
          { str.append('\"');
          }
        case 73: break;
        case 4: 
          { return tok(sym.INT, new Integer(yytext()));
          }
        case 74: break;
        case 30: 
          { comNum=1; yybegin(COMMENT);
          }
        case 75: break;
        case 26: 
          { yybegin(YYINITIAL); 
  return tok(sym.STRING, str.toString());
          }
        case 76: break;
        case 25: 
          { str.append(yytext());
          }
        case 77: break;
        case 1: 
          { err("Character <yytext()> error!");
          }
        case 78: break;
        case 11: 
          { return tok(sym.EQ, null);
          }
        case 79: break;
        case 42: 
          { int tmp=Integer.parseInt(yytext().substring(1, 4));
  if (tmp>255) err("exceed \\ddd");
  else str.append((char)tmp);
          }
        case 80: break;
        case 15: 
          { return tok(sym.DOT, null);
          }
        case 81: break;
        case 34: 
          { return tok(sym.NEQ, null);
          }
        case 82: break;
        case 39: 
          { str.append('\n');
          }
        case 83: break;
        case 2: 
          { 
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   {
    if (yystate()==COMMENT) err("Comment Error!");
    if (yystate()==STRING) err("String Error!");
    if (yystate()==STRINGIN) err("String in Error!");
    return tok(sym.EOF, null);
  }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
